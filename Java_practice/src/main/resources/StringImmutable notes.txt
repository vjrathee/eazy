Why String is immutable 
Immutable simply means unmodifiable or unchangeable.

Key points :

String pool is possible only because String is immutable in Java. This way Java Runtime saves a
lot of heap space because different String variables can refer to the same String variable in the pool.

If String is not immutable then it would cause a severe security threat to the application.
 For example, database username, password are passed as String to get database connection
 and in socket programming host and port details passed as String. Since String is immutable,
 its value can’t be changed otherwise any
 hacker could change the referenced value to cause security issues in the application.

Since String is immutable, it is safe for multithreading.
 A single String instance can be shared across different threads.
 This avoids the use of synchronization for thread safety.

Since String is immutable, its hashcode is cached at the time of creation
and it doesn’t need to be calculated again. This makes it a great candidate for the
  key in a Map and its processing is faster than other HashMap key objects.
  This is why String is the most widely used as HashMap keys.

Q2 : How to write your own custom immutable class

Make your class final

Declare all instance variable with private and final

Say no to setter methods

Initialize all variables in constructor

You can initialize variables in constructor

Perform cloning of mutable objects while returning from getter method

you can go with clone method but its always not recommended, I will show you its disadvantages

Q3 : Which one is good to store password in java String or char[] & Why
Here are a few reasons which make sense to believe that character array is a better choice
for storing the password in Java than String

Since Strings are immutable in Java if you store the password as plain text it will be available
in memory until the Garbage collector clears it and also String literal is stored String pool for
reusability there is a pretty high chance that it will remain in memory for long duration

Because its difficult to destroy literal from SCP as GC unable to perform cleanup activity in SCP only
it will destroy once jvm restarted so which may leads a high security threat

Since anyone who has access to memory dump can find the password in clear text
and that's another reason you should always use an encrypted password than plain text

Since Strings are immutable there are no way contents of Strings can be changed
because any change will produce new String, while if you char[]
you can still set all his elements as blank or zero. So Storing the password in character array
clearly mitigates security risk of stealing passwords.

With String there is always a risk of printing plain text in log file or console but
if use Array you won't print contents of array instead its memory location get printed.
though not a real reason but still make sense.
